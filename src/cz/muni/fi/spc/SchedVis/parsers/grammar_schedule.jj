/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
}
PARSER_BEGIN(ScheduleParser)
package cz.muni.fi.spc.SchedVis.parsers;

import java.util.Vector;
import java.util.List;

public class ScheduleParser extends Parser {
  public static void main(String args[]) throws ParseException {
      try {
        new ScheduleParser(System.in);
        List<ScheduleEvent> events = ScheduleParser.read();
        System.out.println("Successfully read " + events.size() + " events!");
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
  }
}
PARSER_END(ScheduleParser)

TOKEN :
{
    < CONSTANT: "-1" | ( <DIGIT> )+ >  /* A numeric constant. */
|   < CONSTANT_LIST: ( <CONSTANT> ( "," <CONSTANT> )+ ) >  /* A numeric constant. */
|   < #DIGIT: ["0" - "9"] >     /* A single number. */
|   < STRING: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* > /* An allowed string. */
|   < WHITESPACE: ([" ", "\t"])+ > /* An allowed whitespace. */
}

TOKEN :
{
	< MOVE_EVENT_FLAG: "machine-failure-move-good"|"machine-failure-move-bad"|"good-move"|"bad-move">
    |< MACHINE_EVENT_FLAG: "machine-failure" | "machine-restart">
    |< IO_EVENT_FLAG: "job-arrival" | "job-execution-start" | "job-cancel" | "job-completion">
}

List<ScheduleEvent> read() : {
	List<ScheduleEvent> events = new Vector<ScheduleEvent>();
}
{
  (events=event_data(events))+
  ("\n")*
  <EOF>
  {return events;}
}

List<ScheduleEvent> event_data(List<ScheduleEvent> events) : {}
{
  events=machine_event(events) (<WHITESPACE>)* "\n" {return events;}
  | events=move_event(events) (<WHITESPACE>)* "\n" {return events;}
  | events=IO_event(events) (<WHITESPACE>)* "\n" {return events;}
}

List<ScheduleEvent> machine_event(List<ScheduleEvent> list) : {
    Token event;
    Token clock;
    Token machine;
}
{
	event=<MACHINE_EVENT_FLAG> <WHITESPACE> 
	clock=<CONSTANT> <WHITESPACE>
	machine=<STRING>
	{
        list.add(new ScheduleEventMachine(event, clock, machine));
        return list;
    } 	
}

List<ScheduleEvent> move_event(List<ScheduleEvent> list) : {
	Token event;
	Token clock;
	Token job;
	Token origMachine;
	Token newMachine;
	List<ScheduleMachineData> data;
}   
{
    event=<MOVE_EVENT_FLAG> <WHITESPACE> 
    clock=<CONSTANT> <WHITESPACE> 
    job=<CONSTANT> <WHITESPACE> 
    origMachine=<STRING> <WHITESPACE>
    newMachine=<STRING> 
    data=schedule_data()
    {
        list.add(new ScheduleEventMove(event, clock, job, origMachine, newMachine, data));
        return list;
    }
}

List<ScheduleEvent> IO_event(List<ScheduleEvent> list) : {
    Token event;
    Token clock;
    Token job;
    List<ScheduleMachineData> data;
}
{
    event=<IO_EVENT_FLAG> <WHITESPACE> 
    clock=<CONSTANT> <WHITESPACE> 
    job=<CONSTANT> 
    data=schedule_data()
    {
    	list.add(new ScheduleEventIO(event, clock, job, data));
        return list;
    } 
}

List<ScheduleMachineData> schedule_data() : {
	List<ScheduleMachineData> data = new Vector<ScheduleMachineData>();
}
{
	(<WHITESPACE> data=machine_data(data))+
	{return data;}
}

List<ScheduleMachineData> machine_data(List<ScheduleMachineData> list) : {
	List<ScheduleJobData> data = new Vector<ScheduleJobData>();
	Token machineId;
}
{
	"<" machineId=<STRING> ("|" data=job_data(data))* ">"
	{
		list.add(new ScheduleMachineData(machineId, data));
		return list;
	}
}

List<ScheduleJobData> job_data(List<ScheduleJobData> list) : {
	Token job;
	Token numCPUs;
	Token assignedCPUs;
	Token arch;
	Token memory;
	Token space;
	Token start;
    Token end;
    Token deadline;
    ScheduleJobData data = new ScheduleJobData();
}
{
	job=<CONSTANT> ";" 
	numCPUs=<CONSTANT> ";" 
	(assignedCPUs=<CONSTANT_LIST> | assignedCPUs=<CONSTANT>) ";" 
	arch=<STRING> ";" 
	memory=<CONSTANT> ";" 
    space=<CONSTANT> ";" 
	start=<CONSTANT> ";"
	end=<CONSTANT> ";" 
	deadline=<CONSTANT>
	(";")*
	{
		data.setId(job);
		data.setNeedsCPUs(numCPUs);
		data.assignCPUs(assignedCPUs);
		data.setArch(arch);
		data.setNeedsMemory(memory);
		data.setNeedsSpace(space);
		data.setStarts(start);
		data.setEnds(end);
		data.setDeadline(deadline);
		list.add(data);
		return list;
	}
}