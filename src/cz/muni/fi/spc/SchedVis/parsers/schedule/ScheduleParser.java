/* Generated By:JavaCC: Do not edit this line. ScheduleParser.java */
/*
 * This file is part of SchedVis.
 * 
 * SchedVis is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * SchedVis is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * SchedVis. If not, see <http://www.gnu.org/licenses/>.
 */
package cz.muni.fi.spc.SchedVis.parsers.schedule;

import cz.muni.fi.spc.SchedVis.parsers.ParseException;
import cz.muni.fi.spc.SchedVis.parsers.Parser;
import cz.muni.fi.spc.SchedVis.parsers.SimpleCharStream;
import cz.muni.fi.spc.SchedVis.parsers.Token;

public class ScheduleParser extends Parser implements ScheduleParserConstants {
	private static void jj_la1_init_0() {
		ScheduleParser.jj_la1_0 = new int[] { 0x380, 0x2, 0x40, 0x2, 0x40, 0x2,
		    0x40, 0x2, 0x380, 0x40, 0x800, 0xc, 0x2000, };
	}

	/** Generated Token Manager. */
	public ScheduleParserTokenManager token_source;

	SimpleCharStream jj_input_stream;

	/** Current token. */
	public Token token;

	/** Next token. */
	public Token jj_nt;

	private int jj_gen;

	final private int[] jj_la1 = new int[13];

	static private int[] jj_la1_0;

	static {
		ScheduleParser.jj_la1_init_0();
	}
	private final java.util.List jj_expentries = new java.util.ArrayList();
	private int[] jj_expentry;
	private int jj_kind = -1;

	/** Constructor with InputStream. */
	public ScheduleParser(final java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public ScheduleParser(final java.io.InputStream stream, final String encoding) {
		try {
			this.jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		this.token_source = new ScheduleParserTokenManager(this.jj_input_stream);
		this.token = new Token();
		this.token.next = this.jj_nt = this.token_source.getNextToken();
		this.jj_gen = 0;
		for (int i = 0; i < 13; i++) {
			this.jj_la1[i] = -1;
		}
	}

	/** Constructor. */
	public ScheduleParser(final java.io.Reader stream) {
		this.jj_input_stream = new SimpleCharStream(stream, 1, 1);
		this.token_source = new ScheduleParserTokenManager(this.jj_input_stream);
		this.token = new Token();
		this.token.next = this.jj_nt = this.token_source.getNextToken();
		this.jj_gen = 0;
		for (int i = 0; i < 13; i++) {
			this.jj_la1[i] = -1;
		}
	}

	/** Constructor with generated Token Manager. */
	public ScheduleParser(final ScheduleParserTokenManager tm) {
		this.token_source = tm;
		this.token = new Token();
		this.token.next = this.jj_nt = this.token_source.getNextToken();
		this.jj_gen = 0;
		for (int i = 0; i < 13; i++) {
			this.jj_la1[i] = -1;
		}
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	final public ScheduleEventsList event_data(ScheduleEventsList events)
	    throws ParseException {
		if (this.getImporter() != null) {
			this.getImporter().nextLineParsed();
		}
		switch (this.jj_nt.kind) {
			case MACHINE_EVENT_FLAG:
				events = this.machine_event(events);
				label_3: while (true) {
					switch (this.jj_nt.kind) {
						case WHITESPACE:
							;
							break;
						default:
							this.jj_la1[2] = this.jj_gen;
							break label_3;
					}
					this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
				}
				label_4: while (true) {
					this.jj_consume_token(ScheduleParserConstants.EOL);
					switch (this.jj_nt.kind) {
						case EOL:
							;
							break;
						default:
							this.jj_la1[3] = this.jj_gen;
							break label_4;
					}
				}
				{
					if (true) {
						return events;
					}
				}
				break;
			case MOVE_EVENT_FLAG:
				events = this.move_event(events);
				label_5: while (true) {
					switch (this.jj_nt.kind) {
						case WHITESPACE:
							;
							break;
						default:
							this.jj_la1[4] = this.jj_gen;
							break label_5;
					}
					this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
				}
				label_6: while (true) {
					this.jj_consume_token(ScheduleParserConstants.EOL);
					switch (this.jj_nt.kind) {
						case EOL:
							;
							break;
						default:
							this.jj_la1[5] = this.jj_gen;
							break label_6;
					}
				}
				{
					if (true) {
						return events;
					}
				}
				break;
			case IO_EVENT_FLAG:
				events = this.IO_event(events);
				label_7: while (true) {
					switch (this.jj_nt.kind) {
						case WHITESPACE:
							;
							break;
						default:
							this.jj_la1[6] = this.jj_gen;
							break label_7;
					}
					this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
				}
				label_8: while (true) {
					this.jj_consume_token(ScheduleParserConstants.EOL);
					switch (this.jj_nt.kind) {
						case EOL:
							;
							break;
						default:
							this.jj_la1[7] = this.jj_gen;
							break label_8;
					}
				}
				{
					if (true) {
						return events;
					}
				}
				break;
			default:
				this.jj_la1[8] = this.jj_gen;
				this.jj_consume_token(-1);
				throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		this.jj_expentries.clear();
		boolean[] la1tokens = new boolean[14];
		if (this.jj_kind >= 0) {
			la1tokens[this.jj_kind] = true;
			this.jj_kind = -1;
		}
		for (int i = 0; i < 13; i++) {
			if (this.jj_la1[i] == this.jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((ScheduleParser.jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 14; i++) {
			if (la1tokens[i]) {
				this.jj_expentry = new int[1];
				this.jj_expentry[0] = i;
				this.jj_expentries.add(this.jj_expentry);
			}
		}
		int[][] exptokseq = new int[this.jj_expentries.size()][];
		for (int i = 0; i < this.jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) this.jj_expentries.get(i);
		}
		return new ParseException(this.token, exptokseq,
		    ScheduleParserConstants.tokenImage);
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if ((this.token = this.jj_nt).next != null) {
			this.jj_nt = this.jj_nt.next;
		} else {
			this.jj_nt = this.jj_nt.next = this.token_source.getNextToken();
		}
		this.jj_gen++;
		return this.token;
	}

	/** Get the specific Token. */
	final public Token getToken(final int index) {
		Token t = this.token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) {
				t = t.next;
			} else {
				t = t.next = this.token_source.getNextToken();
			}
		}
		return t;
	}

	final public ScheduleEventsList IO_event(final ScheduleEventsList list)
	    throws ParseException {
		Token event;
		Token clock;
		Token job;
		ScheduleMachineDataList data;
		event = this.jj_consume_token(ScheduleParserConstants.IO_EVENT_FLAG);
		this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
		clock = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
		job = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		data = this.schedule_data();
		list.add(new ScheduleEventIO(event, clock, job, data));
		{
			if (true) {
				return list;
			}
		}
		throw new Error("Missing return statement in function");
	}

	private Token jj_consume_token(final int kind) throws ParseException {
		Token oldToken = this.token;
		if ((this.token = this.jj_nt).next != null) {
			this.jj_nt = this.jj_nt.next;
		} else {
			this.jj_nt = this.jj_nt.next = this.token_source.getNextToken();
		}
		if (this.token.kind == kind) {
			this.jj_gen++;
			return this.token;
		}
		this.jj_nt = this.token;
		this.token = oldToken;
		this.jj_kind = kind;
		throw this.generateParseException();
	}

	final public ScheduleJobDataList job_data(final ScheduleJobDataList list)
	    throws ParseException {
		Token job;
		Token numCPUs;
		Token assignedCPUs;
		Token arch;
		Token memory;
		Token space;
		Token start;
		Token end;
		Token deadline;
		ScheduleJobData data = new ScheduleJobData();
		job = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(13);
		numCPUs = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(13);
		switch (this.jj_nt.kind) {
			case CONSTANT_LIST:
				assignedCPUs = this
				    .jj_consume_token(ScheduleParserConstants.CONSTANT_LIST);
				break;
			case CONSTANT:
				assignedCPUs = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
				break;
			default:
				this.jj_la1[11] = this.jj_gen;
				this.jj_consume_token(-1);
				throw new ParseException();
		}
		this.jj_consume_token(13);
		arch = this.jj_consume_token(ScheduleParserConstants.STRING);
		this.jj_consume_token(13);
		memory = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(13);
		space = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(13);
		start = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(13);
		end = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(13);
		deadline = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		label_11: while (true) {
			switch (this.jj_nt.kind) {
				case 13:
					;
					break;
				default:
					this.jj_la1[12] = this.jj_gen;
					break label_11;
			}
			this.jj_consume_token(13);
		}
		data.setId(job);
		data.setNeedsCPUs(numCPUs);
		data.assignCPUs(assignedCPUs);
		data.setArch(arch);
		data.setNeedsMemory(memory);
		data.setNeedsSpace(space);
		data.setStarts(start);
		data.setEnds(end);
		data.setDeadline(deadline);
		list.add(data);
		{
			if (true) {
				return list;
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public ScheduleMachineDataList machine_data(
	    final ScheduleMachineDataList list) throws ParseException {
		ScheduleJobDataList data = new ScheduleJobDataList();
		Token machineId;
		this.jj_consume_token(10);
		machineId = this.jj_consume_token(ScheduleParserConstants.STRING);
		label_10: while (true) {
			switch (this.jj_nt.kind) {
				case 11:
					;
					break;
				default:
					this.jj_la1[10] = this.jj_gen;
					break label_10;
			}
			this.jj_consume_token(11);
			data = this.job_data(data);
		}
		this.jj_consume_token(12);
		list.add(new ScheduleMachineData(machineId, data));
		{
			if (true) {
				return list;
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public ScheduleEventsList machine_event(final ScheduleEventsList list)
	    throws ParseException {
		Token event;
		Token clock;
		Token machine;
		event = this.jj_consume_token(ScheduleParserConstants.MACHINE_EVENT_FLAG);
		this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
		clock = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
		machine = this.jj_consume_token(ScheduleParserConstants.STRING);
		list.add(new ScheduleEventMachine(event, clock, machine));
		{
			if (true) {
				return list;
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public ScheduleEventsList move_event(final ScheduleEventsList list)
	    throws ParseException {
		Token event;
		Token clock;
		Token job;
		Token origMachine;
		Token newMachine;
		ScheduleMachineDataList data;
		event = this.jj_consume_token(ScheduleParserConstants.MOVE_EVENT_FLAG);
		this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
		clock = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
		job = this.jj_consume_token(ScheduleParserConstants.CONSTANT);
		this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
		origMachine = this.jj_consume_token(ScheduleParserConstants.STRING);
		this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
		newMachine = this.jj_consume_token(ScheduleParserConstants.STRING);
		data = this.schedule_data();
		list.add(new ScheduleEventMove(event, clock, job, origMachine, newMachine,
		    data));
		{
			if (true) {
				return list;
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public ScheduleEventsList read() throws ParseException {
		ScheduleEventsList events = new ScheduleEventsList();
		label_1: while (true) {
			events = this.event_data(events);
			switch (this.jj_nt.kind) {
				case MOVE_EVENT_FLAG:
				case MACHINE_EVENT_FLAG:
				case IO_EVENT_FLAG:
					;
					break;
				default:
					this.jj_la1[0] = this.jj_gen;
					break label_1;
			}
		}
		label_2: while (true) {
			switch (this.jj_nt.kind) {
				case EOL:
					;
					break;
				default:
					this.jj_la1[1] = this.jj_gen;
					break label_2;
			}
			this.jj_consume_token(ScheduleParserConstants.EOL);
		}
		this.jj_consume_token(0);
		{
			if (true) {
				return events;
			}
		}
		throw new Error("Missing return statement in function");
	}

	/** Reinitialise. */
	public void ReInit(final java.io.InputStream stream) {
		this.ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(final java.io.InputStream stream, final String encoding) {
		try {
			this.jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		this.token_source.ReInit(this.jj_input_stream);
		this.token = new Token();
		this.token.next = this.jj_nt = this.token_source.getNextToken();
		this.jj_gen = 0;
		for (int i = 0; i < 13; i++) {
			this.jj_la1[i] = -1;
		}
	}

	/** Reinitialise. */
	public void ReInit(final java.io.Reader stream) {
		this.jj_input_stream.ReInit(stream, 1, 1);
		this.token_source.ReInit(this.jj_input_stream);
		this.token = new Token();
		this.token.next = this.jj_nt = this.token_source.getNextToken();
		this.jj_gen = 0;
		for (int i = 0; i < 13; i++) {
			this.jj_la1[i] = -1;
		}
	}

	/** Reinitialise. */
	public void ReInit(final ScheduleParserTokenManager tm) {
		this.token_source = tm;
		this.token = new Token();
		this.token.next = this.jj_nt = this.token_source.getNextToken();
		this.jj_gen = 0;
		for (int i = 0; i < 13; i++) {
			this.jj_la1[i] = -1;
		}
	}

	final public ScheduleMachineDataList schedule_data() throws ParseException {
		ScheduleMachineDataList data = new ScheduleMachineDataList();
		label_9: while (true) {
			this.jj_consume_token(ScheduleParserConstants.WHITESPACE);
			data = this.machine_data(data);
			switch (this.jj_nt.kind) {
				case WHITESPACE:
					;
					break;
				default:
					this.jj_la1[9] = this.jj_gen;
					break label_9;
			}
		}
		{
			if (true) {
				return data;
			}
		}
		throw new Error("Missing return statement in function");
	}

}
