/* Generated By:JavaCC: Do not edit this line. ScheduleParser.java */
package cz.muni.fi.spc.SchedVis.parsers.schedule;

import java.util.Vector;
import java.util.List;

public class ScheduleParser extends cz.muni.fi.spc.SchedVis.parsers.Parser implements ScheduleParserConstants {
  public static void main(String args[]) throws ParseException {
      try {
        ScheduleParser parser = new ScheduleParser(System.in);
        List<ScheduleEvent> events = parser.read();
        System.out.println("Successfully read " + events.size() + " events!");
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
  }

  final public List<ScheduleEvent> read() throws ParseException {
        List<ScheduleEvent> events = new Vector<ScheduleEvent>();
    label_1:
    while (true) {
      events = event_data(events);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE_EVENT_FLAG:
      case MACHINE_EVENT_FLAG:
      case IO_EVENT_FLAG:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(9);
    }
    jj_consume_token(0);
   {if (true) return events;}
    throw new Error("Missing return statement in function");
  }

  final public List<ScheduleEvent> event_data(List<ScheduleEvent> events) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MACHINE_EVENT_FLAG:
      events = machine_event(events);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(WHITESPACE);
      }
      jj_consume_token(9);
                                                     {if (true) return events;}
      break;
    case MOVE_EVENT_FLAG:
      events = move_event(events);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(WHITESPACE);
      }
      jj_consume_token(9);
                                                    {if (true) return events;}
      break;
    case IO_EVENT_FLAG:
      events = IO_event(events);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(WHITESPACE);
      }
      jj_consume_token(9);
                                                  {if (true) return events;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<ScheduleEvent> machine_event(List<ScheduleEvent> list) throws ParseException {
    Token event;
    Token clock;
    Token machine;
    event = jj_consume_token(MACHINE_EVENT_FLAG);
    jj_consume_token(WHITESPACE);
    clock = jj_consume_token(CONSTANT);
    jj_consume_token(WHITESPACE);
    machine = jj_consume_token(STRING);
        list.add(new ScheduleEventMachine(event, clock, machine));
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<ScheduleEvent> move_event(List<ScheduleEvent> list) throws ParseException {
        Token event;
        Token clock;
        Token job;
        Token origMachine;
        Token newMachine;
        List<ScheduleMachineData> data;
    event = jj_consume_token(MOVE_EVENT_FLAG);
    jj_consume_token(WHITESPACE);
    clock = jj_consume_token(CONSTANT);
    jj_consume_token(WHITESPACE);
    job = jj_consume_token(CONSTANT);
    jj_consume_token(WHITESPACE);
    origMachine = jj_consume_token(STRING);
    jj_consume_token(WHITESPACE);
    newMachine = jj_consume_token(STRING);
    data = schedule_data();
        list.add(new ScheduleEventMove(event, clock, job, origMachine, newMachine, data));
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<ScheduleEvent> IO_event(List<ScheduleEvent> list) throws ParseException {
    Token event;
    Token clock;
    Token job;
    List<ScheduleMachineData> data;
    event = jj_consume_token(IO_EVENT_FLAG);
    jj_consume_token(WHITESPACE);
    clock = jj_consume_token(CONSTANT);
    jj_consume_token(WHITESPACE);
    job = jj_consume_token(CONSTANT);
    data = schedule_data();
        list.add(new ScheduleEventIO(event, clock, job, data));
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<ScheduleMachineData> schedule_data() throws ParseException {
        List<ScheduleMachineData> data = new Vector<ScheduleMachineData>();
    label_6:
    while (true) {
      jj_consume_token(WHITESPACE);
      data = machine_data(data);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
    }
         {if (true) return data;}
    throw new Error("Missing return statement in function");
  }

  final public List<ScheduleMachineData> machine_data(List<ScheduleMachineData> list) throws ParseException {
        List<ScheduleJobData> data = new Vector<ScheduleJobData>();
        Token machineId;
    jj_consume_token(10);
    machineId = jj_consume_token(STRING);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      jj_consume_token(11);
      data = job_data(data);
    }
    jj_consume_token(12);
                list.add(new ScheduleMachineData(machineId, data));
                {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<ScheduleJobData> job_data(List<ScheduleJobData> list) throws ParseException {
        Token job;
        Token numCPUs;
        Token assignedCPUs;
        Token arch;
        Token memory;
        Token space;
        Token start;
    Token end;
    Token deadline;
    ScheduleJobData data = new ScheduleJobData();
    job = jj_consume_token(CONSTANT);
    jj_consume_token(13);
    numCPUs = jj_consume_token(CONSTANT);
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT_LIST:
      assignedCPUs = jj_consume_token(CONSTANT_LIST);
      break;
    case CONSTANT:
      assignedCPUs = jj_consume_token(CONSTANT);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(13);
    arch = jj_consume_token(STRING);
    jj_consume_token(13);
    memory = jj_consume_token(CONSTANT);
    jj_consume_token(13);
    space = jj_consume_token(CONSTANT);
    jj_consume_token(13);
    start = jj_consume_token(CONSTANT);
    jj_consume_token(13);
    end = jj_consume_token(CONSTANT);
    jj_consume_token(13);
    deadline = jj_consume_token(CONSTANT);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_8;
      }
      jj_consume_token(13);
    }
                data.setId(job);
                data.setNeedsCPUs(numCPUs);
                data.assignCPUs(assignedCPUs);
                data.setArch(arch);
                data.setNeedsMemory(memory);
                data.setNeedsSpace(space);
                data.setStarts(start);
                data.setEnds(end);
                data.setDeadline(deadline);
                list.add(data);
                {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  public ScheduleParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1c0,0x200,0x20,0x20,0x20,0x1c0,0x20,0x800,0x6,0x2000,};
   }

  public ScheduleParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ScheduleParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScheduleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public ScheduleParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScheduleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public ScheduleParser(ScheduleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public void ReInit(ScheduleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
