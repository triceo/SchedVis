/*
    This file is part of SchedVis.

    SchedVis is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SchedVis is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SchedVis.  If not, see <http://www.gnu.org/licenses/>.

 */
/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
}
PARSER_BEGIN(MachinesParser)
/*
    This file is part of SchedVis.

    SchedVis is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SchedVis is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SchedVis.  If not, see <http://www.gnu.org/licenses/>.

 */
package cz.muni.fi.spc.SchedVis.parsers.machines;

import cz.muni.fi.spc.SchedVis.parsers.Parser;

public class MachinesParser extends Parser {
  public static void main(String args[]) throws ParseException {
      try {
        MachinesParser parser = new MachinesParser(System.in);
        MachinesList machines = parser.read();
        System.out.println("Successfully read " + machines.size() + " machines!");
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
  }
  
}
PARSER_END(MachinesParser)

TOKEN :
{
    < EOL: "\r" | "\n" | "\r\n" >  /* Some kind of end of line. */
|   < CONSTANT: "-1" | ( <DIGIT> )+ >  /* A numeric constant. */
|   < #DIGIT: ["0" - "9"] >     /* A single number. */
|   < STRING: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","_"," ","0"-"9"] )* > /* An allowed string. */
}

MachinesList read() :
{
	MachinesList machines = new MachinesList();
}
{
    (machines=machine_data(machines))+
    (<EOL>)*
    <EOF>
    {return machines;}	
}

MachinesList machine_data(MachinesList machines) : 
{
    if (this.getImporter() != null) this.getImporter().nextLineParsed();
	Token name;
	Token numCPUs;
	Token speed;
	Token arch;
	Token os;
	Token mem;
	Token space;
}
{
	name=<STRING> ";" 
	numCPUs=<CONSTANT> ";" 
	speed=<CONSTANT> ";" 
	arch=<STRING> ";" 
	os=<STRING> ";" 
	mem=<CONSTANT> ";" 
	space=<CONSTANT> (<EOL>)+
	{
		machines.add(new MachineData(name, numCPUs, speed, arch, os, mem, space));
        if (this.getImporter() != null) this.getImporter().nextLineParsed();
		return machines;
	} 
}