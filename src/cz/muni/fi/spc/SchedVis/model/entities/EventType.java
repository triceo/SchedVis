/*
 * This file is part of SchedVis.
 * 
 * SchedVis is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SchedVis is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SchedVis. If not, see <http://www.gnu.org/licenses/>.
 */
package cz.muni.fi.spc.SchedVis.model.entities;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.Entity;
import javax.persistence.Id;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Index;

import cz.muni.fi.spc.SchedVis.model.BaseEntity;
import cz.muni.fi.spc.SchedVis.util.Database;

/**
 * JPA Entity that represents type of an event.
 * 
 * @author Lukáš Petrovický <petrovicky@mail.muni.cz>
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
public final class EventType extends BaseEntity {
	public static int EVENT_JOB_ARRIVAL = 1;
	public static int EVENT_JOB_EXECUTION_START = 2;
	public static int EVENT_JOB_CANCEL = 3;
	public static int EVENT_MACHINE_RESTART = 4;
	public static int EVENT_MACHINE_FAILURE = 5;
	public static int EVENT_JOB_MOVE_GOOD = 6;
	public static int EVENT_JOB_MOVE_BAD = 7;
	public static int EVENT_MACHINE_FAILURE_JOB_MOVE_GOOD = 10;
	public static int EVENT_MACHINE_FAILURE_JOB_MOVE_BAD = 11;
	public static int EVENT_JOB_COMPLETION = 12;
	private static Integer internalIdCounter = 0;
	private int internalId;
	private static final Map<Integer, EventType> byId = Collections
	    .synchronizedMap(new HashMap<Integer, EventType>());

	/**
	 * Retrieve event type with a given id.
	 * 
	 * @param eventTypeId
	 *          The id of the event type in question.
	 * @return The event type.
	 */
	public static EventType getWithId(final int eventTypeId) {
		if (!EventType.byId.containsKey(eventTypeId)) {
			EventType.byId.put(eventTypeId, (EventType) Database.find(
			    EventType.class, eventTypeId));
		}
		return EventType.byId.get(eventTypeId);
	}

	private String name;

	private int id;

	public EventType() {
		synchronized (EventType.internalIdCounter) {
			this.setInternalId(EventType.internalIdCounter++);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof EventType)) {
			return false;
		}
		final EventType other = (EventType) obj;
		if (this.internalId != other.internalId) {
			return false;
		}
		return true;
	}

	/**
	 * This ID is not auto-generated by JPA because Importer needs to map IDs to
	 * well-known event types. Thus, the Importer creates the IDs on its own.
	 * 
	 * @return ID of the event type.
	 */
	@Id
	public int getId() {
		return this.id;
	}

	public int getInternalId() {
		return this.internalId;
	}

	@Index(name = "etnIndex")
	public String getName() {
		return this.name;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + this.internalId;
		return result;
	}

	public void setId(final int id) {
		this.id = id;
	}

	private void setInternalId(final int id) {
		this.internalId = id;
	}

	public void setName(final String name) {
		this.name = name;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "EventType [id=" + this.id + ", "
		    + (this.name != null ? "name=" + this.name : "") + "]";
	}

}
